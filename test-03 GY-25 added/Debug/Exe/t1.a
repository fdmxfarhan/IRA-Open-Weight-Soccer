;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/13/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <math.h>
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0040 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0041 char status,data;
; 0000 0042 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0043 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0044 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0045    {
; 0000 0046    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0047 #if RX_BUFFER_SIZE == 256
; 0000 0048    // special case for receiver buffer size=256
; 0000 0049    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 004A #else
; 0000 004B    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004C    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 004D       {
; 0000 004E       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 004F       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0050       }
; 0000 0051 #endif
; 0000 0052    }
;PCODE: $0000002A VOL: 0
; 0000 0053 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 005A {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 005B char data;
; 0000 005C while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 005D data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005E #if RX_BUFFER_SIZE != 256
; 0000 005F if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0060 #endif
; 0000 0061 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0062 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0063 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0064 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0065 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0071 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0072 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000004D VOL: 0
;	adc_input -> Y+0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0073 // Delay needed for the stabilization of the ADC input voltage
; 0000 0074 delay_us(10);
;PCODE: $00000051 VOL: 0
; 0000 0075 // Start the AD conversion
; 0000 0076 ADCSRA|=(1<<ADSC);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0077 // Wait for the AD conversion to complete
; 0000 0078 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0079 ADCSRA|=(1<<ADIF);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007A return ADCW;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007B }
;PCODE: $0000005F VOL: 0
;
;
;///////////////////////////////////////////////////////////////////vars
;int speed = 255;
;int i;
;int cmp,c=0;
;int x, y,width,height,checksum, signature;
;char a,b;
;int x_robot = 150, y_robot = 100, ball_angle, ball, ball_distance;

	.DSEG
;int x_goal, y_goal, goal_angle, goal_distance, goal,is_goal = 0,cnt=0,cmp_balance = 0;
;
;int kick_sen;
;int is_ball = 0;
;
;//////////////////////////////////////////////////////////////////////////////////PIXY-CMUCAM5
;#define I2C_7BIT_DEVICE_ADDRESS 0x54
;#define EEPROM_BUS_ADDRESS (I2C_7BIT_DEVICE_ADDRESS << 1)
;
;unsigned int  address=0x54;
;unsigned char read()
; 0000 0090 {

	.CSEG
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0091 unsigned char data;
; 0000 0092 i2c_start();
;PCODE: $00000062 VOL: 0
;	data -> R17
;PCODE: $00000063 VOL: 0
; 0000 0093 i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0094 i2c_write(address >> 8);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0095 i2c_write((unsigned char) address);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0096 i2c_start();
;PCODE: $0000006B VOL: 0
; 0000 0097 i2c_write(EEPROM_BUS_ADDRESS | 1);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0098 data=i2c_read(0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0099 i2c_stop();
;PCODE: $00000071 VOL: 0
; 0000 009A return data;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009B }
;PCODE: $00000075 VOL: 0
;//////////////////////////////////////////////////////////////////////////////////CMP-READ
;#define EEPROM_BUS_ADDRES 0xc0
;/* read/ a byte from the EEPROM */
;unsigned char compass_read(unsigned char addres)
; 0000 00A0     {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A1     unsigned char data;
; 0000 00A2     i2c_start();
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;	addres -> Y+1
;	data -> R17
;PCODE: $0000007A VOL: 0
; 0000 00A3     i2c_write(EEPROM_BUS_ADDRES);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A4     i2c_write(addres);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A5     i2c_start();
;PCODE: $0000007F VOL: 0
; 0000 00A6     i2c_write(EEPROM_BUS_ADDRES | 1);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A7     data=i2c_read(0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00A8     i2c_stop();
;PCODE: $00000085 VOL: 0
; 0000 00A9     return data;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00AA     }
;PCODE: $0000008B VOL: 0
;
;void print(int var)
; 0000 00AD     {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00AE     if(var>=0)
;PCODE: $0000008E VOL: 0
;	var -> Y+0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00AF         {
; 0000 00B0         lcd_putchar('+');
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B1         lcd_putchar((var/100)%10+'0');
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B2         lcd_putchar((var/10)%10+'0');
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00B3         lcd_putchar((var/1)%10+'0');
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00B4         }
; 0000 00B5     else
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B6         {
; 0000 00B7         lcd_putchar('-');
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B8         lcd_putchar((-var/100)%10+'0');
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B9         lcd_putchar((-var/10)%10+'0');
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00BA         lcd_putchar((-var/1)%10+'0');
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00BB         }
;PCODE: $000000CE VOL: 0
; 0000 00BC     }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;
;void motor(int mr1,int mr2,int ml2,int ml1)
; 0000 00BF     {
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00C0     mr1 += cmp;
;PCODE: $000000D4 VOL: 0
;	mr1 -> Y+6
;	mr2 -> Y+4
;	ml2 -> Y+2
;	ml1 -> Y+0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00C1     mr2 += cmp;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00C2     ml1 += cmp;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00C3     ml2 += cmp;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00C4 
; 0000 00C5     if(ml1>255) ml1=255;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00C6     if(ml2>255) ml2=255;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00C7     if(mr2>255) mr2=255;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00C8     if(mr1>255) mr1=255;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00C9 
; 0000 00CA     if(ml1<-255) ml1=-255;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00CB     if(ml2<-255) ml2=-255;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00CC     if(mr2<-255) mr2=-255;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00CD     if(mr1<-255) mr1=-255;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00CE 
; 0000 00CF     //////////////mr1
; 0000 00D0     {
;PCODE: $00000114 VOL: 0
; 0000 00D1     if(mr1>=0)
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00D2         {
; 0000 00D3         PORTB.2=0;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00D4         OCR0=mr1;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00D5         }
; 0000 00D6     else
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00D7         {
; 0000 00D8         PORTB.2=1;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00D9         OCR0=mr1+255;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00DA         }
;PCODE: $00000123 VOL: 0
; 0000 00DB         }
; 0000 00DC     //////////////mr2
; 0000 00DD     {
; 0000 00DE     if(mr2>=0)
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00DF         {
; 0000 00E0         PORTD.2=0;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00E1         OCR1B=mr2;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00E2         }
; 0000 00E3     else
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00E4         {
; 0000 00E5         PORTD.2=1;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00E6         OCR1B=mr2+255;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00E7         }
;PCODE: $00000132 VOL: 0
; 0000 00E8         }
; 0000 00E9     //////////////mL2
; 0000 00EA     {
; 0000 00EB     if(ml2>=0)
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00EC         {
; 0000 00ED         PORTD.3=0;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00EE         OCR1A=ml2;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00EF         }
; 0000 00F0     else
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00F1         {
; 0000 00F2         PORTD.3=1;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00F3         OCR1A=ml2+255;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00F4         }
;PCODE: $00000141 VOL: 0
; 0000 00F5         }
; 0000 00F6     //////////////ml1
; 0000 00F7     {
; 0000 00F8     if(ml1>=0)
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00F9         {
; 0000 00FA         PORTD.6=0;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00FB         OCR2=ml1;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00FC         }
; 0000 00FD     else
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00FE         {
; 0000 00FF         PORTD.6=1;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0100         OCR2=ml1+255;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0101         }
;PCODE: $00000150 VOL: 0
; 0000 0102     }
; 0000 0103 
; 0000 0104     }
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;
;void read_pixy()
; 0000 0107     {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0108     a=read();
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0109     if(a==0xaa)
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 010A       {
; 0000 010B       a=read();
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 010C       if(a==0x55)
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 010D         {
; 0000 010E         read();
;PCODE: $00000160 VOL: 0
; 0000 010F         checksum = read();
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0110         checksum += read() * 255;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0111         signature = read();
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0112         signature += read() * 255;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0113         if(signature == 1)
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0114             {
; 0000 0115             x = read();
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0116             x+=read()*255;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0117             y = read();
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0118             y += read() * 255;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0119             }
; 0000 011A         else
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 011B             {
; 0000 011C             x_goal = read();
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 011D             x_goal+=read()*255;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 011E             y_goal = read();
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 011F             y_goal += read() * 255;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0120             }
;PCODE: $0000019C VOL: 0
; 0000 0121         width = read();
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0122         width += read() * 255;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0123         height = read();
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0124         height += read() * 255;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0125         }
; 0000 0126       }
;PCODE: $000001AF VOL: 0
; 0000 0127     if(a != 0 && signature == 1) is_ball = 1;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0128     else if(a != 0 && signature == 2) {is_goal = 1; is_ball = 0;}
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0129     else
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 012A         {
; 0000 012B         is_ball = 0;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 012C         is_goal = 0;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 012D         }
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 012E     ball_angle = atan2(y - y_robot, x - x_robot) * 180 / PI;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 012F     if (ball_angle < 0) ball_angle += 360;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0130     ball_angle = 360 - ball_angle;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0131     for(i = 0; i < 16; i++)
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0132         {
; 0000 0133         if(ball_angle <= 11.25) ball = 0;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0134         else if(ball_angle >= 348.5) ball = 0;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0135         else if((ball_angle - 11.25 >= i * 22.5) && (ball_angle-11.25 < (i+1) * 22.5))
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0136             ball = i + 1;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0137         }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0138     ball_distance = sqrt(pow(x-(x_robot) , 2) + pow(y-y_robot, 2));
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0139 
; 0000 013A 
; 0000 013B     goal_angle = atan2(y_goal - y_robot, x_goal - x_robot) * 180 / PI;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 013C     if (goal_angle < 0) goal_angle += 360;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 013D     goal_angle = 360 - goal_angle;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 013E     for(i = 0; i < 16; i++)
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 013F         {
; 0000 0140         if(goal_angle <= 11.25) goal = 0;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0141         else if(goal_angle >= 348.5) goal = 0;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 0142         else if((goal_angle - 11.25 >= i * 22.5) && (goal_angle-11.25 < (i+1) * 22.5))
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0143             goal = i + 1;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0144         }
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0145     goal_distance = sqrt(pow(x_goal-(x_robot) , 2) + pow(y_goal-y_robot, 2));
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0146 
; 0000 0147     lcd_gotoxy(0,0);
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0148     lcd_putchar('B');
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0149     lcd_putchar((ball/10)%10+'0');
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 014A     lcd_putchar((ball/1)%10+'0');
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 014B 
; 0000 014C     lcd_gotoxy(5,0);
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 014D     lcd_putchar('G');
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 014E     lcd_putchar((goal/10)%10+'0');
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 014F     lcd_putchar((goal/1)%10+'0');
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0150 
; 0000 0151 
; 0000 0152 //    lcd_gotoxy(0,0);
; 0000 0153 //    lcd_putsf("X=");
; 0000 0154 //    lcd_putchar((x/100)%10+'0');
; 0000 0155 //    lcd_putchar((x/10)%10+'0');
; 0000 0156 //    lcd_putchar((x/1)%10+'0');
; 0000 0157 //
; 0000 0158 //    lcd_gotoxy(5,0);
; 0000 0159 //    lcd_putsf("Y=");
; 0000 015A //    lcd_putchar((y/100)%10+'0');
; 0000 015B //    lcd_putchar((y/10)%10+'0');
; 0000 015C //    lcd_putchar((y/1)%10+'0');
; 0000 015D     }
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;
;void move(int direction)
; 0000 0160     {
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0161     if(direction == 0)      motor(speed   , speed   , -speed  , -speed   );
;PCODE: $000002FD VOL: 0
;	direction -> Y+0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 0162     if(direction == 1)      motor(speed   , speed/2 , -speed  , -speed/2 );
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0163     if(direction == 2)      motor(speed   , 0       , -speed  , 0        );
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 0164     if(direction == 3)      motor(speed   , -speed/2, -speed  , speed/2  );
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 0165     if(direction == 4)      motor(speed   , -speed  , -speed  , speed    );
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0166     if(direction == 5)      motor(speed/2 , -speed  , -speed/2, speed    );
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 0167     if(direction == 6)      motor(0       , -speed  , 0       , speed    );
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 0168     if(direction == 7)      motor(-speed/2, -speed  , speed/2 , speed    );
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 0169 
; 0000 016A     if(direction == 8)      motor(-speed  , -speed  , speed   , speed    );
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 016B 
; 0000 016C     if(direction == 9)      motor(-speed   , -speed/2, speed   , speed/2 );
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 016D     if(direction == 10)     motor(-speed   , 0       , speed   , 0       );
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 016E     if(direction == 11)     motor(-speed   , speed/2 , speed   , -speed/2);
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 016F     if(direction == 12)     motor(-speed   , speed   , speed   , -speed  );
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 0170     if(direction == 13)     motor(-speed/2 , speed   , speed/2 , -speed  );
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 0171     if(direction == 14)     motor(0        , speed   , 0       , -speed  );
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 0172     if(direction == 15)     motor(speed/2  , speed   , -speed/2, -speed  );
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 0173     }
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;
;void read_cmp()
; 0000 0176     {
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 0177     putchar(0xa5);
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 0178     putchar(0x52);
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0179     b = getchar();
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
; 0000 017A     if(b == 0xaa)  cmp = getchar() + cmp_balance;
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 017B     if(cnt>=200) {cmp_balance++; cnt = 0;}
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 017C     cnt++;
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 017D     if(cmp > 128) cmp = cmp - 255;
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 017E     lcd_gotoxy(0,1);
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0000 017F     print(cmp);
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 0180     if(cmp<30 && cmp>-30) cmp*=2;
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 0181     }
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;
;void shoot()
; 0000 0184     {
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 0185     PORTC.3 = 1;
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0000 0186     delay_ms(100);
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 0187     PORTC.3 = 0;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 0188 
; 0000 0189     }
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;
;void main(void)
; 0000 018C {
;PCODE: $0000043D VOL: 0
; 0000 018D // Declare your local variables here
; 0000 018E 
; 0000 018F // Input/Output Ports initialization
; 0000 0190 // Port A initialization
; 0000 0191 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0192 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 0193 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0194 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
; 0000 0195 
; 0000 0196 // Port B initialization
; 0000 0197 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0198 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 0199 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 019A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 019B 
; 0000 019C // Port C initialization
; 0000 019D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 019E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 019F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 01A0 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 01A1 
; 0000 01A2 // Port D initialization
; 0000 01A3 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 01A4 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0000 01A5 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 01A6 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 01A7 
; 0000 01A8 // Timer/Counter 0 initialization
; 0000 01A9 // Clock source: System Clock
; 0000 01AA // Clock value: 125.000 kHz
; 0000 01AB // Mode: Fast PWM top=0xFF
; 0000 01AC // OC0 output: Non-Inverted PWM
; 0000 01AD // Timer Period: 2.048 ms
; 0000 01AE // Output Pulse(s):
; 0000 01AF // OC0 Period: 2.048 ms Width: 0 us
; 0000 01B0 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 01B1 TCNT0=0x00;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 01B2 OCR0=0x00;
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 01B3 
; 0000 01B4 // Timer/Counter 1 initialization
; 0000 01B5 // Clock source: System Clock
; 0000 01B6 // Clock value: 125.000 kHz
; 0000 01B7 // Mode: Fast PWM top=0x00FF
; 0000 01B8 // OC1A output: Non-Inverted PWM
; 0000 01B9 // OC1B output: Non-Inverted PWM
; 0000 01BA // Noise Canceler: Off
; 0000 01BB // Input Capture on Falling Edge
; 0000 01BC // Timer Period: 2.048 ms
; 0000 01BD // Output Pulse(s):
; 0000 01BE // OC1A Period: 2.048 ms Width: 0 us// OC1B Period: 2.048 ms Width: 0 us
; 0000 01BF // Timer1 Overflow Interrupt: Off
; 0000 01C0 // Input Capture Interrupt: Off
; 0000 01C1 // Compare A Match Interrupt: Off
; 0000 01C2 // Compare B Match Interrupt: Off
; 0000 01C3 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 01C4 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 01C5 TCNT1H=0x00;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 01C6 TCNT1L=0x00;
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0000 01C7 ICR1H=0x00;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 01C8 ICR1L=0x00;
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0000 01C9 OCR1AH=0x00;
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 01CA OCR1AL=0x00;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 01CB OCR1BH=0x00;
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 01CC OCR1BL=0x00;
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 01CD 
; 0000 01CE // Timer/Counter 2 initialization
; 0000 01CF // Clock source: System Clock
; 0000 01D0 // Clock value: 125.000 kHz
; 0000 01D1 // Mode: Fast PWM top=0xFF
; 0000 01D2 // OC2 output: Non-Inverted PWM
; 0000 01D3 // Timer Period: 2.048 ms
; 0000 01D4 // Output Pulse(s):
; 0000 01D5 // OC2 Period: 2.048 ms Width: 0 us
; 0000 01D6 ASSR=0<<AS2;
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 01D7 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 01D8 TCNT2=0x00;
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 01D9 OCR2=0x00;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 01DA 
; 0000 01DB // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01DC TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 01DD 
; 0000 01DE // External Interrupt(s) initialization
; 0000 01DF // INT0: Off
; 0000 01E0 // INT1: Off
; 0000 01E1 // INT2: Off
; 0000 01E2 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0000 01E3 MCUCSR=(0<<ISC2);
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0000 01E4 
; 0000 01E5 // USART initialization
; 0000 01E6 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01E7 // USART Receiver: On
; 0000 01E8 // USART Transmitter: On
; 0000 01E9 // USART Mode: Asynchronous
; 0000 01EA // USART Baud Rate: 9600
; 0000 01EB UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 01EC UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0000 01ED UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 01EE UBRRH=0x00;
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
; 0000 01EF UBRRL=0x33;
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 01F0 
; 0000 01F1 // Analog Comparator initialization
; 0000 01F2 // Analog Comparator: Off
; 0000 01F3 // The Analog Comparator's positive input is
; 0000 01F4 // connected to the AIN0 pin
; 0000 01F5 // The Analog Comparator's negative input is
; 0000 01F6 // connected to the AIN1 pin
; 0000 01F7 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0000 01F8 
; 0000 01F9 // ADC initialization
; 0000 01FA // ADC Clock frequency: 125.000 kHz
; 0000 01FB // ADC Voltage Reference: AVCC pin
; 0000 01FC // ADC Auto Trigger Source: ADC Stopped
; 0000 01FD ADMUX=ADC_VREF_TYPE;
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0000 01FE ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 01FF SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 0200 
; 0000 0201 // SPI initialization
; 0000 0202 // SPI disabled
; 0000 0203 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 0204 
; 0000 0205 // TWI initialization
; 0000 0206 // TWI disabled
; 0000 0207 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 0208 
; 0000 0209 // Bit-Banged I2C Bus initialization
; 0000 020A // I2C Port: PORTB
; 0000 020B // I2C SDA bit: 1
; 0000 020C // I2C SCL bit: 0
; 0000 020D // Bit Rate: 100 kHz
; 0000 020E // Note: I2C settings are specified in the
; 0000 020F // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0210 i2c_init();
;PCODE: $0000048C VOL: 0
; 0000 0211 
; 0000 0212 // Alphanumeric LCD initialization
; 0000 0213 // Connections are specified in the
; 0000 0214 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0215 // RS - PORTC Bit 0
; 0000 0216 // RD - PORTC Bit 1
; 0000 0217 // EN - PORTC Bit 2
; 0000 0218 // D4 - PORTC Bit 4
; 0000 0219 // D5 - PORTC Bit 5
; 0000 021A // D6 - PORTC Bit 6
; 0000 021B // D7 - PORTC Bit 7
; 0000 021C // Characters/line: 16
; 0000 021D lcd_init(16);
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 021E 
; 0000 021F // Global enable interrupts
; 0000 0220 #asm("sei")
;PCODE: $0000048F VOL: 0
	sei
;PCODE: $00000490 VOL: 0
; 0000 0221 speed = 255;
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 0222 read_pixy();
;PCODE: $00000493 VOL: 0
; 0000 0223 while(x == 0 && y == 0) read_pixy();
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 0224 while (1)
;PCODE: $000004A2 VOL: 0
; 0000 0225     {
; 0000 0226     read_pixy();
;PCODE: $000004A3 VOL: 0
; 0000 0227     read_cmp();
;PCODE: $000004A4 VOL: 0
; 0000 0228     kick_sen = read_adc(0);
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
; 0000 0229     lcd_gotoxy(5,1);
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 022A     lcd_putchar((kick_sen/1000)%10+'10');
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 022B     lcd_putchar((kick_sen/100)%10+'10');
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0000 022C     lcd_putchar((kick_sen/10)%10+'10');
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0000 022D     lcd_putchar((kick_sen/1)%10+'10');
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
; 0000 022E     if(kick_sen<400)
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 022F         {
; 0000 0230         PORTB.4 = 1;
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 0231         if(!is_goal)  motor(-150,-150,150,150);
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 0232         else if(goal_distance<70)
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 0233             {
; 0000 0234             cmp = 0;
;PCODE: $000004E3 VOL: 0
; 0000 0235             if(goal == 0) {motor(-cmp,-cmp,-cmp,-cmp);shoot();}
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
; 0000 0236             else if(goal>3 && goal < 8)   motor(120,120,120,120);
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
; 0000 0237             else if(goal>=8 && goal < 13) motor(-120,-120,-120,-120);
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0000 0238             else if(goal<=3)              motor(80,80,80,80);
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
; 0000 0239             else if(goal>=13)             motor(-80,-80,-80,-80);
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
; 0000 023A             }
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
; 0000 023B         else
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
; 0000 023C             {
; 0000 023D             speed = 150;
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 023E             move(goal);
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 023F             speed = 255;
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 0240             }
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 0241         }
; 0000 0242     else if(is_ball)
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
; 0000 0243         {
; 0000 0244         if(ball_distance < 90)
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 0245             {
; 0000 0246             PORTB.4 = 1;
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0000 0247             if(ball == 0)       move(ball);
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
; 0000 0248             else if(ball == 1)  move(2);
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0000 0249             else if(ball == 15) move(14);
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
; 0000 024A             else if(ball == 2)  move(4);
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
; 0000 024B             else if(ball == 14) move(12);
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
; 0000 024C 
; 0000 024D             else if(ball>2 && ball<=6)    move(ball + 2);
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0000 024E             else if(ball>=10 && ball<14)  move(ball - 2);
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
; 0000 024F 
; 0000 0250             else if(ball>6 && ball<=8)    move(ball + 2);
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 0251             else if(ball>8 && ball<10)    move(ball - 2);
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
; 0000 0252             }
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
; 0000 0253         else
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 0254             {
; 0000 0255             PORTB.4 = 0;
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
; 0000 0256             move(ball);
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
; 0000 0257             }
;PCODE: $000005BC VOL: 0
; 0000 0258         }
; 0000 0259     else
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
; 0000 025A         {
; 0000 025B         PORTB.4 = 0;
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0000 025C         motor(0,0,0,0);
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
; 0000 025D         }
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
; 0000 025E     }
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
; 0000 025F }
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
